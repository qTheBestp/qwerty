import random
import time
from ctypes.wintypes import PRECT

import pygame
import pygame as pg
pg.init()

class Platform:
    def __init__(self, screen, x, y, l, h, color=(200, 200, 200)):
        self.x = x
        self.y = y
        self.l = l
        self.h = h
        self.screen = screen
        self.color = color


    def draw(self):
        pg.draw.rect(surface=self.screen, color=self.color, rect=(self.x, self.y, self.l, self.h))


platforms: list[Platform] = []


class SimpleMan(pg.sprite.Sprite):
    def __init__(self, *groups):
        super().__init__(*groups)
        self.stay_images = [pg.image.load("Idle1.png"),
                            pg.image.load("Idle2.png"),
                            pg.image.load("Idle3.png"),
                            pg.image.load("Idle4.png"),
                            pg.image.load("Idle5.png"),
                            pg.image.load("Idle6.png"),
                            pg.image.load("Idle7.png"),
                            pg.image.load("Idle8.png")]

        self.run_images = [pg.image.load("Run1.png"),
                           pg.image.load("Run2.png"),
                           pg.image.load("Run3.png"),
                           pg.image.load("Run4.png"),
                           pg.image.load("Run5.png"),
                           pg.image.load("Run6.png"),
                           pg.image.load("Run7.png"),
                           pg.image.load("Run8.png")]

        self.jump_images = [pg.image.load("Jump1.png"),
                            pg.image.load("Jump2.png")]


        self.x = 200
        self.y = 400
        self.crop = 0
        self.xsp = 0
        self.ysp = 0
        self.stay = True
        self.jump = False
        self.run = False
        self.l = 0
        self.h = 0


    def control(self, event):
            if event.type == pg.KEYDOWN:
                if event.key == pg.K_d:
                    self.xsp = 7
                if event.key == pg.K_a:
                    self.xsp = -7
                if event.key == pg.K_SPACE and self.jump == False:
                    self.jump = True
                    self.ysp = 10
            if event.type == pg.KEYUP:
                if event.key == pg.K_a:
                    self.xsp = 0
                if event.key == pg.K_d:
                    self.xsp = 0




    def update(self, scr):


        for pl in range(len(platforms)):
            platform = platforms[pl]
            if (self.x-35 in range(platform.x, platform.x + platform.l) and self.y + self.h-100 in range(platform.y, platform.y + platform.h)) or (self.x -35 + self.l in range(platform.x, platform.x + platform.l) and self.y + self.h-100 in range(platform.y, platform.y + platform.h)):
                self.stay = True
                self.jump = False
                self.y = platform.y
                self.ysp = 0
            self.ysp -= 1
        if self.jump:
            if self.stay:
                scr.blit(self.jump_images[self.crop % 2], (self.x - self.jump_images[self.crop % 2].get_size()[0] + 50,
                                                           self.y - self.jump_images[self.crop % 2].get_size()[1]))
            else:
                scr.blit(pg.transform.flip(self.jump_images[self.crop % 2], True, False),
                         (self.x, self.y - self.jump_images[self.crop % 2].get_size()[1]))
            self.l, self.h = self.jump_images[self.crop % 2].get_size()
        else:
            if self.xsp == 0:
                if self.stay:
                    scr.blit(self.stay_images[self.crop], (self.x, self.y - self.stay_images[self.crop].get_size()[1]))
                else:
                    scr.blit(pg.transform.flip(self.stay_images[self.crop], True, False), (self.x - self.stay_images[self.crop].get_size()[0] + 50, self.y - self.stay_images[self.crop].get_size()[1]))
                self.l, self.h = self.stay_images[self.crop].get_size()
            elif self.xsp == 7:
                scr.blit(self.run_images[self.crop], (self.x, self.y - self.run_images[self.crop].get_size()[1]))
                self.stay = True
                self.l, self.h = self.run_images[self.crop].get_size()
            elif self.xsp == -7:
                scr.blit(pg.transform.flip(self.run_images[self.crop], True, False), (self.x, self.y - self.run_images[self.crop].get_size()[1]))
                self.stay = False
                self.l, self.h = self.run_images[self.crop].get_size()



        self.crop += 1
        if self.crop > 7:
            self.crop = 0

        self.x += self.xsp
        self.y -= self.ysp




        return scr


scr = pg.display.set_mode((800, 600))

platforms.append(Platform(scr, 0, 400, 800, 200, color=(255, 0, 0)))
platforms.append(Platform(scr, 300, 380, 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))
# platforms.append(Platform(scr, random.randint(100, 600), random.randint(0, 400), 100, 40, color=(200, 200, 200)))

man = SimpleMan()
while True:

    scr.fill((0, 255, 0))
    for i in range(len(platforms)):
        platforms[i].draw()
    for i in pg.event.get():
        if i.type == pg.QUIT:
            pg.quit()
        else:
            man.control(i)

    scr = man.update(scr)
    time.sleep(0.1)
    pg.display.flip()
